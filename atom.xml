<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://wakaka378.github.io/atom.xml" rel="self"/>
  
  <link href="https://wakaka378.github.io/"/>
  <updated>2023-04-18T12:13:20.878Z</updated>
  <id>https://wakaka378.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>防抖debounce理解</title>
    <link href="https://wakaka378.github.io/2023-04-09-%E9%98%B2%E6%8A%96debounce%E7%90%86%E8%A7%A3.html"/>
    <id>https://wakaka378.github.io/2023-04-09-%E9%98%B2%E6%8A%96debounce%E7%90%86%E8%A7%A3.html</id>
    <published>2023-04-09T13:54:09.000Z</published>
    <updated>2023-04-18T12:13:20.878Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebd170e14b414cc89fd50f01fdb78487~tplv-k3u1fbpfcp-watermark.image?" alt="" style="width:100%" /></p><blockquote><p>「我正在参与掘金会员专属活动-源码共读第一期，<a href="https://juejin.cn/post/7169502488557518878" title="https://juejin.cn/post/7169502488557518878">点击参与</a>」</p></blockquote><h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p><strong>防抖</strong>相信大家都不陌生，面试中会经常会被问题或提起。比如会问一些前端优化、手写<strong>防抖节流函数</strong>等等，这里就跟着<a href="https://github.com/jashkenas/underscore/blob/master/modules/debounce.js">underscore</a> 源码来学习一下。</p><h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1><p><strong>在规定时间后才执行，如果触发则重新计时</strong><br />也就是说，防抖函数在n秒内，无论触发了多少次函数回调，我都只只在n秒后执行一次。比如我们设置一个等待时间为5秒的防抖函数，如果5秒内有触发，就需要重新计时，直到5秒内没有触发就调用执行。</p><h1 id="使用场景"><a class="markdownIt-Anchor" href="#使用场景"></a> 使用场景</h1><p>最近项目中有一个表单搜索场景，在输入文字的过程中会持续触发<code>oninput</code>事件，而搜索接口只是在用户输入搜索文字后进行调用。如果是用户输入一个文字就搜索一次，不仅会频繁调用后台接口，前端显示效果也不好。</p><p>使用<strong>防抖</strong>的话，可以将接口调用设定在<code>500ms</code>内没有触发<code>oninput</code>事件后再调用接口，这样就可以解决问题。</p><p>还会在其他场景使用</p><ul><li>一些频繁点击操作的按钮，比如登录、短信验证，避免用户短时间多次发送</li><li>调整浏览器窗口大小时，resize 次数过于频繁，造成计算过多，此时需要一次到位，就用到了防抖</li><li>鼠标移动<code>mousedown</code>计算等场景</li></ul><h1 id="实现原理"><a class="markdownIt-Anchor" href="#实现原理"></a> 实现原理</h1><p>实现原理其实很简单，就是利用定时器，函数在最开始执行的时候就设定一个定时器，如果在n秒内有执行就吧定时器清空，重新设定一个新的定时器，当n秒内没有再调用后，定时器计时结束后就会触发回调。</p><h1 id="第一版"><a class="markdownIt-Anchor" href="#第一版"></a> 第一版</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* debounce防抖</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type"> function </span>&#125; fn 回调</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type"> number </span>&#125; wait 等待时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait = <span class="number">300</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 利用闭包生成唯一的一个定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个函数，当作触发事件执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="comment">// 上一次存在定时器，需要清空</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 设定定时器，定时器结束后执行回调函数 fn  如果多次触发就重新设定</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125;, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再写一个输入框事件来测试一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> oninput=<span class="string">&quot;oninputHandler(event)&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> testFn = <span class="title function_">debounce</span>(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行防抖&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 执行防抖 停止 scroll 事件后 1 秒执行回调</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">oninputHandler</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">testFn</span>(event);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 不执行防抖</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">oninputHandler</span>(<span class="params">event</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;input change value: &#x27;</span> + event.<span class="property">target</span>.<span class="property">value</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这是没有执行防抖<br /><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5957c66dae0b4b6b89381351da99ae35~tplv-k3u1fbpfcp-watermark.image?" alt="Kapture 2022-12-04 at 21.56.21.gif" /></p><p>开启防抖后<br /><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebd170e14b414cc89fd50f01fdb78487~tplv-k3u1fbpfcp-watermark.image?" alt="Kapture 2022-12-04 at 21.57.44.gif" /></p><p>效果还是很明显的，从原来的输入一个值就触发，到现在1秒内没有输入才触发，至此，<strong>简单版防抖</strong>就已经实现了。</p><h1 id="第二版"><a class="markdownIt-Anchor" href="#第二版"></a> 第二版</h1><p>接下来再来对<strong>防抖</strong>做一下改造，在首次调用的时候立即执行函数，等到n秒内没有触发，才可以重新触发执行。</p><p>听起来有点绕，也就是说在<code>oninput</code>事件第一次触发的时候就执行，后续的触发都不执行。等到1秒内没有执行后，再触发<code>oninput</code>时又会执行第一次。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* debounce防抖</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type"> function </span>&#125; fn 回调</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type"> number </span>&#125; wait 等待时间</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> &#123;<span class="type"> boolean </span>&#125; immediate 是否立即执行</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, wait = <span class="number">300</span>, immediate = <span class="literal">false</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 利用闭包生成唯一的一个定时器</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回一个函数，当作触发事件执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="comment">// 上一次存在定时器，需要清空</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// immediate: true 时，首次触发后立即执行</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        <span class="comment">// 是否首次执行过</span></span><br><span class="line">        <span class="keyword">const</span> isExecute = !timer;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 赋值定时器 避免重复执行</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          timer = <span class="literal">null</span>;</span><br><span class="line">        &#125;, wait);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 首次执行</span></span><br><span class="line">        isExecute &amp;&amp; fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 设定定时器，定时器结束后执行回调函数 fn  如果多次触发就重新设定</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;, wait);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="underscore-源码"><a class="markdownIt-Anchor" href="#underscore-源码"></a> underscore 源码</h1><p>来看一下<a href="https://github.com/jashkenas/underscore">underscore</a>里是如何实现的，先将核心代码复制出来，用上面的<code>oninput</code>事件来调试，看一下它的一个具体步骤。</p><p>在<code>debounced</code>方法内部打上一个断点，然后在输入框输入数据触发<strong>防抖</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> timeout, previous, args, result, context;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> later = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// now获取的是当前时间 previous 会在第一次进入的时候记录  对比两个时间差是否小于 wait 等待时间</span></span><br><span class="line">    <span class="keyword">var</span> passed = <span class="title function_">now</span>() - previous;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (wait &gt; passed) &#123;</span><br><span class="line">      <span class="comment">// 小于等待时间 说明在 wait时间内有触发 重新设定定时器</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait - passed);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 超过等待时间 执行回调</span></span><br><span class="line">      <span class="comment">// 清空 timeout  避免影响到下次使用</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断是否立即执行</span></span><br><span class="line">      <span class="keyword">if</span> (!immediate) result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// This check is needed because `func` can recursively invoke `debounced`.</span></span><br><span class="line">      <span class="comment">// 清空上下文、arguments 参数 在回调里面嵌套使用</span></span><br><span class="line">      <span class="keyword">if</span> (!timeout) args = context = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 先执行这里  通过 restArguments 将处理结果当作函数进行返回 回调时传递 arguments 参数</span></span><br><span class="line">  <span class="keyword">var</span> debounced = <span class="title function_">restArguments</span>(<span class="keyword">function</span> (<span class="params">_args</span>) &#123;</span><br><span class="line">    context = <span class="variable language_">this</span>;</span><br><span class="line">    args = _args;</span><br><span class="line">    <span class="comment">// 触发一次记录时间  用来和等待时间对比</span></span><br><span class="line">    previous = <span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">      <span class="comment">// 第一次进入时执行</span></span><br><span class="line">      <span class="comment">// 执行 later 函数</span></span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 立即执行</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 取消执行 清空定时器等参数</span></span><br><span class="line">  debounced.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = args = context = <span class="literal">null</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debounced;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码还是有很多亮点的</p><ul><li>增加了<code>cancel</code>方法，可以随时取消。</li><li>在执行回调的时候，吧函数结果当作返回值<code>return</code>出去，是为了避免回调中有返回数据。</li><li>通过记录每次执行时间差，来判断是否需要执行回调。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ebd170e14b414cc89fd50f01fdb78487~tplv-k3u1fbpfcp-watermark.image?
&quot; alt=&quot;&quot; st</summary>
      
    
    
    <content src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c3df9aaab1c149e0b7ed0a30b3fbcef9~tplv-k3u1fbpfcp-zoom-crop-mark:1512:1512:1512:851.awebp?" type="image"/>
    
    
    <category term="js" scheme="https://wakaka378.github.io/categories/js/"/>
    
    
    <category term="js" scheme="https://wakaka378.github.io/tags/js/"/>
    
    <category term="性能优化" scheme="https://wakaka378.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    <category term="节流防抖" scheme="https://wakaka378.github.io/tags/%E8%8A%82%E6%B5%81%E9%98%B2%E6%8A%96/"/>
    
  </entry>
  
  <entry>
    <title>vue中使用vue-socket.io的一些心得、踩坑记录</title>
    <link href="https://wakaka378.github.io/2023-04-09-vue%E4%B8%AD%E4%BD%BF%E7%94%A8vue-socket-io%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E3%80%81%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html"/>
    <id>https://wakaka378.github.io/2023-04-09-vue%E4%B8%AD%E4%BD%BF%E7%94%A8vue-socket-io%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97%E3%80%81%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95.html</id>
    <published>2023-04-09T11:56:28.000Z</published>
    <updated>2023-04-09T12:35:17.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>vue项目中有使用到<code>socket</code>长连接，之前一直都是都是使用<code>vue-socke.io</code>[<a href="https://github.com/MetinSeylan/Vue-Socket.io">github地址</a>]，但最近在使用时，出了一些莫名奇妙的bug，也是为此掉了不少头发，最后还是解决了。关于<code>socket</code>相关内容介绍以及使用场景，这里不会做太多介绍（主要是懒），可以翻看其他文章。本文主要介绍如何使用，以及再使用时需要注意一些什么。关于文章中使用的代码，我放上<a href="https://github.com/gebilaofan/vue-socket.io-demo">github</a>地址。前端小鸟一枚，立誓要成为前端菜鸟，不足地方留言指出，小子谢过。</p><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>这里我们安装<code>vue.socket.io</code>模块和<code>socket.io-client</code>模块，也可以不用<code>socket.io-client</code>模块，请往下看。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cnpm <span class="selector-tag">i</span> vue-socket<span class="selector-class">.io</span> -S</span><br><span class="line">cnpm <span class="selector-tag">i</span> socket<span class="selector-class">.io-client</span> -S</span><br><span class="line"></span><br><span class="line">yarn vue-socket<span class="selector-class">.io</span></span><br><span class="line">yarn <span class="selector-tag">i</span> socket.io-client</span><br></pre></td></tr></table></figure><h2 id="vue-客户端使用"><a class="markdownIt-Anchor" href="#vue-客户端使用"></a> vue 客户端使用</h2><ul><li>使用<code>socket.io-client</code>连接</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSocketIO</span> <span class="keyword">from</span> <span class="string">&#x27;vue-socket.io&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">SocketIO</span> <span class="keyword">from</span> <span class="string">&quot;socket.io-client&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// socket 连接参数</span></span><br><span class="line"><span class="keyword">const</span> socketOptions = &#123;</span><br><span class="line">  <span class="attr">autoConnect</span>: <span class="literal">false</span>,       <span class="comment">// 自动连接     这里为我项目需求  需要在指定情况下才连接socket</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">VueSocketIO</span>(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span> ,   <span class="comment">// debug调试，生产建议关闭</span></span><br><span class="line">    <span class="attr">connection</span>: <span class="title class_">SocketIO</span>(<span class="string">&quot;127.0.0.1:1024&quot;</span>, socketOptions),</span><br><span class="line">    store,          <span class="comment">// 如果没有使用到store可以不用写</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="comment">// 这里为全局监听socket事件消息，监听函数这里只写了一点，其实很有很多事件。</span></span><br><span class="line">  <span class="attr">sockets</span>: &#123;</span><br><span class="line">    <span class="title function_">connecting</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;正在连接&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">disconnect</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Socket 断开&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">connect_failed</span>(<span class="params"></span>) &#123;</span><br><span class="line">      cosnole.<span class="title function_">log</span>(<span class="string">&#x27;连接失败&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;socket connected&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>字符串连接</p><p>如果是正常使用，项目启动就连接socket，可以不需要加载<code>socket.io-client</code>模块，直接使用。</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">VueSocketIO</span>(&#123;</span><br><span class="line">    <span class="attr">debug</span>: <span class="literal">true</span> ,   <span class="comment">// debug调试，生产建议关闭</span></span><br><span class="line">    <span class="attr">connection</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1024</span>,</span><br><span class="line">    store,          <span class="comment">// 如果没有使用到store可以不用写</span></span><br><span class="line">  &#125;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>组件中使用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;connect&quot;</span>&gt;</span>连接socket<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMessage&quot;</span>&gt;</span>发送数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 连接socket</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">connect</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="title function_">open</span>()       <span class="comment">// 开始连接socket</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">     </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 订阅事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">sockets</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;welcome&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome data &#x27;</span>, data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 发送消息</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendMessage</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="title function_">emit</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;这里是客户端&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">sockets</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">welcome</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome data &#x27;</span>, data)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="客户端使用总结"><a class="markdownIt-Anchor" href="#客户端使用总结"></a> 客户端使用总结</h3><h4 id="客户端自带监听事件"><a class="markdownIt-Anchor" href="#客户端自带监听事件"></a> 客户端自带监听事件</h4><ul><li>connect：连接成功</li><li>connecting：正在连接</li><li>disconnect：断开连接</li><li>connect_failed：连接失败</li><li>error：错误发生，并且无法被其他事件类型所处理</li><li>reconnect_failed：重连失败</li><li>reconnect：成功重连</li><li>reconnecting：正在重连</li></ul><h4 id="监听自定义事件"><a class="markdownIt-Anchor" href="#监听自定义事件"></a> 监听自定义事件</h4><ul><li>全局监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sockets</span>:&#123;</span><br><span class="line">    <span class="attr">welcome</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome data&#x27;</span>, data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>组件内监听</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">sockets</span>.<span class="title function_">subscribe</span>(<span class="string">&#x27;welcome&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome&#x27;</span>, data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a class="markdownIt-Anchor" href="#发送消息"></a> 发送消息</h4><p><strong>注意</strong>：监听用的是<code>this.sockets</code>，发送消息是<code>this.$socket</code>，不要弄混。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="title function_">emit</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;这里是客户端&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="关于跨域问题"><a class="markdownIt-Anchor" href="#关于跨域问题"></a> 关于跨域问题</h4><p>socket会存在跨域问题，之前看文章又说到在<code>vue.config.js</code>中配置代理，差不多和后台接口代理配置一样，但我试过好像没啥鸟用，如果有知道的同学麻烦留言告诉一声，实际项目中的解决方式还是后端配置跨域问题。</p><h2 id="服务端使用"><a class="markdownIt-Anchor" href="#服务端使用"></a> 服务端使用</h2><p>这里为啥要讲服务端使用，主要是为了让同学更好的体验socket，其次是为了引出后面的bug，也是一个扩展知识把，是不是觉得自己赚了😄。本地开启socket服务可以更好的进行调试。服务端主要还是使用<code>node</code>，毕竟咱也不会java、python…，这里以及配置了socket跨域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Descripttion: </span></span><br><span class="line"><span class="comment"> * @version: </span></span><br><span class="line"><span class="comment"> * @Author: fanliu</span></span><br><span class="line"><span class="comment"> * @Date: 2020-06-19 18:22</span></span><br><span class="line"><span class="comment"> * @LastEditors: fanliu</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2020-06-19 18:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">&#x27;socket.io&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建server服务</span></span><br><span class="line"><span class="keyword">var</span> server = http.<span class="title function_">createServer</span>(<span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> headers = &#123;&#125;;</span><br><span class="line">  headers[<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>] = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">  headers[<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>] = <span class="string">&quot;POST, GET, PUT, DELETE, OPTIONS&quot;</span>;</span><br><span class="line">  headers[<span class="string">&quot;Access-Control-Allow-Credentials&quot;</span>] = <span class="literal">true</span>;</span><br><span class="line">  headers[<span class="string">&quot;Access-Control-Max-Age&quot;</span>] = <span class="string">&#x27;86400&#x27;</span>; <span class="comment">// 24 hours</span></span><br><span class="line">  headers[<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>] = <span class="string">&quot;X-Requested-With, Access-Control-Allow-Origin, X-HTTP-Method-Override, Content-Type, Authorization, Accept&quot;</span>;</span><br><span class="line">  res.<span class="title function_">writeHead</span>(<span class="number">200</span>, headers);</span><br><span class="line">  res.<span class="title function_">end</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器  监听 1024 端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">1024</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server runing at 127.0.0.1:1024&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动socket服务</span></span><br><span class="line"><span class="keyword">var</span> socket = io.<span class="title function_">listen</span>(server, &#123;<span class="attr">origins</span>: <span class="string">&#x27;*:*&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端连接</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;connection&#x27;</span>,<span class="keyword">function</span>(<span class="params">socket</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端有连接&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听客户端断开</span></span><br><span class="line">socket.<span class="title function_">on</span>(<span class="string">&#x27;disconnect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;客户端断开&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给客户端发送消息</span></span><br><span class="line">socket.<span class="title function_">emit</span>(<span class="string">&#x27;welcome&#x27;</span>,<span class="string">&#x27;欢迎连接socket&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 监听客户端消息</span></span><br><span class="line">        socket.<span class="title function_">on</span>(<span class="string">&#x27;hello&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收客户端发送数据&#x27;</span>, data)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="服务端总结"><a class="markdownIt-Anchor" href="#服务端总结"></a> 服务端总结</h3><p><strong>服务端接收和发送消息和客户端对调的</strong>，客户端<code>emit</code>发送消息，那么服务端这里就要<code>on</code>监听客户端发送的消息，服务的发送同理。</p><h2 id="踩坑"><a class="markdownIt-Anchor" href="#踩坑"></a> 踩坑</h2><h3 id="订阅事件记得要取消"><a class="markdownIt-Anchor" href="#订阅事件记得要取消"></a> 订阅事件记得要取消</h3><p>socket主要还是用来写聊天室，加入socket房间后要订阅房间内所有的聊天内容，这时如果没有取消之前的订阅事件，下次进入会多次订阅消息。也就是别人只发一条消息，你这边接收到的却是两条甚至多条。哪如何取消订阅呢，我的处理方式是在离开当前聊天页面后，自动取消之前所有的订阅事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sockets</span>.<span class="title function_">unsubscribe</span>(eventName)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同理，如果是有指定页面才加入socket房间，退出页面时也要记得关闭socket连接。比如你在<code>created</code>中开始连接socket，在<code>beforeDestroy</code>要记得关闭socket，不然下次进入也会连接socket。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="title function_">open</span>()</span><br><span class="line">    <span class="comment">// 查看socket是否连接成功</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="property">connected</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$socket</span>.<span class="title function_">close</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="type-error-thissocketssubscribe-is-not-a-function"><a class="markdownIt-Anchor" href="#type-error-thissocketssubscribe-is-not-a-function"></a> Type Error: this.sockets.subscribe is not a function</h3><p>这是我最近遇到的问题，原本以为是自己的this指向有问题，然后从到尾查遍了整个逻辑this，发现并不是这个问题。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d0d9547cb4d71~tplv-t2oaga2asx-image.image" alt="" /></p><p>在打印<code>this.sockets</code>之后我发现问题</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d0da331a5ad65~tplv-t2oaga2asx-image.image" alt="" /><br /><code>subscribe</code>订阅事件并没有直接存在，而是某个对象的属性，于是尝试了一下<code>this.sockets.listenner.subscribe</code>发现能用了。</p><p>你以为这就结束了？？？接着我又发现问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sockets</span>:&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">welcome</span>: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;welcome data &#x27;</span>, data)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且订阅的事件中，socket日志显示<code>component: undefined</code>没有看到数据</p><p>全局的订阅事件没有生效，并且socket自带的连接事件也没有启动打印。我直接傻了😢，之前使用的时候还没有这些问题，百度一大堆无果后，开始像官方求助。于是找到了问题。<br /><a href="">Vue-Socket.io: #connect subscribe, component: undefined</a></p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/6/20/172d0de8634dcf66~tplv-t2oaga2asx-image.image" alt="" /></p><p>大概的意思是说，出现问题的都是3.0.9的版本，将版本后可以解决这个问题。这也是我为啥要把socket服务端写进了的原因。自己本地写了一个小demo后，还真的是版本的问题，随后就有了这篇文章。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>同学们在使用vue-socket.io时要注意一下版本，现在的<code>3.0.9</code>多多少少会出现问题，可以选择<code>3.0.7</code>版本。这个可以使用文章开头我的测试demo进行查看，socket服务代码也在项目中。<br />第一次在掘金中发表文章，表达有错误的地方还请多多谅解，之后也会发布更多前端技术文章，还请多多关注。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#前言&quot;&gt;&lt;/a&gt; 前言&lt;/h2&gt;
&lt;p&gt;vue项目中有使用到&lt;code&gt;socket&lt;/code&gt;长连接，之前一直都是都是使用&lt;code&gt;vue-socke.io&lt;/code&gt;[&lt;a </summary>
      
    
    
    
    <category term="Vue" scheme="https://wakaka378.github.io/categories/Vue/"/>
    
    
    <category term="Vue" scheme="https://wakaka378.github.io/tags/Vue/"/>
    
    <category term="socket.io" scheme="https://wakaka378.github.io/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://wakaka378.github.io/2023-04-09-hello-world.html"/>
    <id>https://wakaka378.github.io/2023-04-09-hello-world.html</id>
    <published>2023-04-09T09:58:03.574Z</published>
    <updated>2023-04-09T12:01:37.950Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
